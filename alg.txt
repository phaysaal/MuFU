
* is /\ or \/
f is the formula to be unfolded and folded
DEF is the set of rules or predicate definitions


Disjunct/Conjunct Unfold-Fold f DEF
-----------------------------------
let b    be a sub-foormula of f where predicate calls do not contain constant argument.
let g    be a rule with a new name n and b.
let T    be a the transformation function for formula normalization and simplification
let f'   be tree_based_unfold_fold T g DEF b
let ff'  be f' restored with remaining subformula of f
update g's body to be ff'
return g

tree_based_unfold_fold T g DEF b
----------------------------------------------------
let deps be set of level-1 dependencies (predicate calls in the body) of each predicate
		= {(name, set of predicate calls) of rule | rule in DEF}
let Trees be the set of least set of trees for each predicate where each reachable predicates (by subsequent unfolding) are at the nodes of some of the trees. 
		= {build_tree_deps [<name,params>] [name] PCs DEF deps params| (name, PCs) in deps, <name,params,_> in DEF} 
let UPs be list of possible unfold paths with number of unfolding times for each path
		= get_unfold_paths DEF Trees b
let r be the first unfolding of b along the a path in UPs for which folding is possible
		= unfold_fold_along_paths g T DEF UPs b
return r

build_tree_deps TP H PCs DEF deps root_args     (TP:tree path, H:history, PCs: Predicate Calls)
-----------------------------------------------------------------
let S be {(TP, pn, args[params := root_args]) | <n, args> in PCs, <pn, params, _> in DEF}
let nonT be {<TP, pn, a> | <TP, pn, a> in S, pn not in H}
let R be {build_tree_deps (TP@<pn,a>) (H@n) DEF deps a n | <TP, pn, a> in nonT}
return (S @ R)

get_unfold_paths DEF Trees b
---------------------------------------
For each conjunct C in b
		let PREDs be the set of predicate calls in C
		let Trees_ps be the set of set of all tree paths from each pred in PREDs
				= {trees | <pn, a> in PERDs, <pn, trees> in Trees}
		let all_paths be the set of all combined paths
				= Trees_p1 * ... * Trees_pn
		let candidate_paths be the selected paths where the final destinations must have all the predicate calls in PREDs
				= {path | path in all_paths, p in PREDs implies p in 'end_nodes_of path', arguments changes are consistent in 'end_nodes_of path'}
		let unfolding_paths be the set of possible paths with number of unfolding times from candidate_paths
				= {(path, get_number_of_unfolding_times path C) | path in canddiate_paths}

get_number_of_unfolding_times path C
--------------------------------------
Use constraint solving to get unfolding time of the subpaths of path for C














------------------------------

Input -- OK
Split definitions and goal -- OK
Size change graph -- OK
Get all combinations for pattern matching of predicates -- OK
Test each combination
		 Get regular expressions -- OK
		 Get summary information -- OK
		 Get constraints -- OK
		 Solve constraints -- OK
		 Unfold sequence generation -- OK
		 Unfold -- OK
		 Fold -- OK
		 Fold residual






Unfolded: ((x=0 \/ (((x+(-2))=0 \/ (P ((x-2)-2) \/ ((x+(-1))=0 \/ (P (((x-2)+1)-2) \/ P (((x-2)+1)+1))))) \/ P (x+1))),Q x)

Goal: P x,Q x
Trying: P x,Q x
Regular Expressions: ((((P->-2->P:0 | P->1->P:1))^*),({Q->-2->Q:0}^*))
Constrained Regular Expressions: ((P->-2->P:0)^{m3}(P->1->P:1)^{m4},(Q->-2->Q:0)^{m6})
Auxiliary Constraints: ((((m3+m4)=m2 /\ (m2<=0 \/ m1>0)) /\ m1=1),(((0 = 0) /\ (m6<=0 \/ m5>0)) /\ m5=1))
Computed Size Change: ((x,(((-2)*m3)+(1*m4)),x),(y,((-2)*m6),y))
Summary Information: (([x],(x+(((-2)*m3)+(1*m4)))),([x],(x+((-2)*m6))))
Constraints: ((x+(((-2)*m3)+(1*m4)))=(x+((-2)*m6)))
Goal: (let ((a!1 (not (= (+ x (* (- 2) m3) (* 1 m4)) 0)))
      (a!2 (not (= (+ x (* (- 2) m6)) 0))))
  (and (> (+ m3 m4 m6) 0)
       (or a!1 a!2)
       (= (+ m3 m4) m2)
       (or (<= m2 0) (> m1 0))
       (= m1 1)
       true
       (or (<= m6 0) (> m5 0))
       (= m5 1)
       (= (+ x (* (- 2) m3) (* 1 m4)) (+ x (* (- 2) m6)))))
Solver: (declare-fun m6 () Int)
(declare-fun m3 () Int)
(declare-fun x () Int)
(assert (not (<= (+ (* 3 m3) (* (- 1) m6)) 0)))
(assert (not (= (+ x (* (- 2) m6)) 0)))

Goal: (let ((a!1 (not (= (+ x (* (- 2) m3) (* 1 m4)) 0)))
      (a!2 (not (= (+ x (* (- 2) m6)) 0))))
  (and (= x (- 1))
       (= m3 0)
       (= m6 (- 1))
       (or a!1 a!2)
       (= (+ m3 m4) m2)
       (or (<= m2 0) (> m1 0))
       (= m1 1)
       true
       (or (<= m6 0) (> m5 0))
       (= m5 1)
       (= (+ x (* (- 2) m3) (* 1 m4)) (+ x (* (- 2) m6)))))
Solver: (declare-fun x () Int)
(declare-fun m3 () Int)
(declare-fun m6 () Int)
(declare-fun m4 () Int)
(declare-fun m2 () Int)
(declare-fun m1 () Int)
(declare-fun m5 () Int)
(assert (= x (- 1)))
(assert (= m3 0))
(assert (= m6 (- 1)))
(assert (let ((a!1 (not (= (+ x (* (- 2) m6)) 0)))
      (a!2 (not (= (+ x (* (- 2) m3) m4) 0))))
  (or a!1 a!2)))
(assert (= (+ m3 m4) m2))
(assert (or (<= m2 0) (not (<= m1 0))))
(assert (= m1 1))
(assert (or (<= m6 0) (not (<= m5 0))))
(assert (= m5 1))
(assert (= (+ (* (- 2) m3) m4) (* (- 2) m6)))


(([x],(x+(((-2)*m3)+(1*m4)))),([x],(x+((-2)*m6))))

m3: 1
m6: 1
m3: 1
m6: 1
m2: 1
m1: 1
m5: 1
m4: 0

Local Constraints: (0+m7)=1,(0+m8)=0
model: m7: 1, ,m8: 0, 
Local Constraints: (0+m9)=1
model: m9: 1, 
Reconstructed: (P->-2->P:0)^{1} (P->1->P:1)^{0}
Local Constraints: (0+m10)=1
model: m10: 1, 
Local Constraints: (0+m11)=1
model: m11: 1, 
Reconstructed: (Q->-2->Q:0)^{1}

Flatten: (P:0,Q:0)

Unfoldeds: ((x=0 \/ (P (x+(-2)) \/ P (x+1))),(x=1 \/ Q (x+(-2))))
Unfolded goal: (((x=0 \/ (P (x+(-2)) \/ P (x+1))) \/ (x=1 \/ Q (x+(-2)))))
Before Fold: 
((x=0 \/ (P (x+(-2)) \/ P (x+1))) \/ (x=1 \/ Q (x+(-2))))
Disjunctive
Formula f: (P x \/ Q x)
Formula list f: P x,Q x
Pred_f: P x,Q x
Formula ff': ((x=0 \/ (P (x+(-2)) \/ P (x+1))) \/ (x=1 \/ Q (x+(-2))))
Pred_ff': P (x+(-2)),P (x+1),Q (x+(-2))
matched: P (x+(-2)),Q (x+(-2))
Find Matching: 
(P (x+(-2)) \/ Q (x+(-2)))
to : (P x \/ Q x)
Model: x:=(x+(-2))
Params: x
Matching
After Fold: 
(((x=0 \/ x=1) \/ P (x+1)) \/ X (x+(-2)))
Folded goal: ((((x=0 \/ x=1) \/ P (x+1)) \/ X (x+(-2))))
