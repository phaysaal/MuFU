%HES

G x =v Even x \/ NotOdd (x-1).
NotEven a =v a <> 0 /\ NotOdd (a-1).
NotOdd b =v NotEven (b-1).
Even c =μ x = 0 \/ Odd (c-1).
Odd d =μ Even (d-1).

/*
(declare-fun G (Int) Bool)
(declare-fun NotEven (Int) Bool)
(declare-fun NotOdd (Int) Bool)
(declare-fun Odd (Int) Bool)
(declare-fun Even (Int) Bool)
(declare-fun mu () Bool)
(declare-fun nu () Bool)

(assert (forall ((x Int)) (G x)))

(assert (forall ((x Int))
  (= (G x) (or (Even x) (NotOdd (- x 1))))))

(assert (and nu (forall ((x Int))
  (= (NotEven x) (and (not (= x 0)) (NotOdd (- x 1)))))))

(assert (and nu (forall ((x Int))
  (= (NotOdd x) (NotEven (- x 1))))))

(assert (and mu (forall ((x Int))
  (= (Even x) (or (= x 0) (Odd (- x 1)))))))

(assert (and mu (forall ((x Int))
  (= (Odd x) (Even (- x 1))))))

(check-sat)

*/